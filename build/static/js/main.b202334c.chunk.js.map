{"version":3,"sources":["testImage.png","components/modal.js","components/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","props","className","children","Folders","folderArr","map","folder","Folder","displayName","useState","editable","setEditable","setEditableFalse","value","name","length","slice","console","log","TextField","autoFocus","defaultValue","onBlur","e","target","onKeyDown","keyCode","key","onClick","Sidebar","Logo","ModalToggle","modal","Fragment","src","require","alt","Image","modalOn","setModalOn","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2MAAAA,EAAOC,QAAU,IAA0B,uC,mFCG9BC,G,YAAQ,SAACC,GACpB,OACE,yBAAKC,UAAU,SAASD,EAAME,Y,kDCC5BC,EAAU,SAAC,GACf,OADiC,EAAhBC,UACAC,KAAI,SAACC,GAAD,OAAY,kBAAC,EAAD,CAAQA,OAAQA,QAG7CC,EAAS,SAAC,GAAgB,IAY1BC,EAZYF,EAAa,EAAbA,OAAa,EACGG,oBAAS,GADZ,mBACtBC,EADsB,KACZC,EADY,KAG7B,SAASC,EAAiBC,GACxBP,EAAOQ,KAAOD,EACdF,GAAY,GAcd,OALEH,EADEF,EAAOQ,KAAKC,OAAS,GACTT,EAAOQ,KAAKE,MAAM,EAAG,IAAM,MAE3BV,EAAOQ,KAEvBG,QAAQC,IAAIV,GACPE,EAUD,yBAAKT,UAAU,UACb,kBAAC,IAAD,CAAYA,UAAU,eACtB,kBAACkB,EAAA,EAAD,CACEC,WAAS,EACTC,aAAcf,EAAOQ,KACrBQ,OAAQ,SAACC,GAAD,OAAOX,EAAiBW,EAAEC,OAAOX,QACzCY,UA5BR,SAAkBF,GACE,KAAdA,EAAEG,SAA4B,WAAVH,EAAEI,KACxBf,EAAiBW,EAAEC,OAAOX,UA4BxB,kBAAC,IAAD,CAAUZ,UAAU,WAAW2B,QAAS,kBAAMjB,GAAY,OAhB5D,yBAAKV,UAAU,UACb,kBAAC,IAAD,CAAYA,UAAU,eACtB,wBAAIA,UAAU,QAAQO,GACtB,kBAAC,IAAD,CAAUP,UAAU,WAAW2B,QAAS,kBAAMjB,GAAY,QAmBrDkB,EAAU,WAQrB,OACE,yBAAK5B,UAAU,WACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAASG,UAVC,CACd,CAAEU,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,WACR,CAAEA,KAAM,iB,iBCrDNgB,EAAO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC3B,OACE,kBAAC,IAAMC,SAAP,KACE,yBACEL,QAASG,EACT9B,UAAU,OACViC,IAAKC,EAAQ,IACbC,IAAI,SAENJ,EAAQ,kBAAC,IAAMC,SAAP,MAAoB,kBAAC,IAAD,CAAyBhC,UAAU,WAKrE,SAASoC,EAAT,GAAuC,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,WACjBR,EAAc,WAClBQ,GAAYD,IAEd,OAAKA,EAQD,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMN,OAAO,EAAMD,YAAaA,KAPlC,yBAAK9B,UAAU,mBACb,kBAAC,EAAD,CAAM+B,OAAO,EAAOD,YAAaA,IAAgB,KAqB1CS,MATf,WAAgB,IAAD,EACiB/B,oBAAS,GAD1B,mBACN6B,EADM,KACGC,EADH,KAEb,OACE,yBAAKtC,UAAU,YAAY2B,QAAS,WAASU,GAASC,GAAW,KAC/D,kBAAC,EAAD,MACA,kBAACF,EAAD,CAAOC,QAASA,EAASC,WAAYA,MChCvBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.b202334c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/testImage.0baeaccd.png\";","import React from 'react';\nimport './modal.css'\n\nexport const Modal = (props) => {\n  return(\n    <div className=\"modal\">{props.children}</div>\n  )\n}\n\n","import React, { useState } from \"react\";\nimport \"./sidebar.css\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\n\nconst Folders = ({ folderArr }) => {\n  return folderArr.map((folder) => <Folder folder={folder} />);\n};\n\nconst Folder = ({ folder }) => {\n  const [editable, setEditable] = useState(false);\n\n  function setEditableFalse(value) {\n    folder.name = value;\n    setEditable(false);\n  }\n  function keyPress(e) {\n    if (e.keyCode === 13 || e.key === \"Escape\") {\n      setEditableFalse(e.target.value);\n    }\n  }\n  let displayName;\n  if (folder.name.length > 10) {\n    displayName = folder.name.slice(0, 10) + \"...\";\n  } else {\n    displayName = folder.name;\n  }\n  console.log(displayName)\n  if (!editable) {\n    return (\n      <div className=\"folder\">\n        <FolderIcon className='foldericon'/>\n        <h3 className=\"text\">{displayName}</h3>\n        <EditIcon className='editicon' onClick={() => setEditable(true)} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"folder\">\n        <FolderIcon className='foldericon'/>\n        <TextField\n          autoFocus\n          defaultValue={folder.name}\n          onBlur={(e) => setEditableFalse(e.target.value)}\n          onKeyDown={keyPress}\n        />\n        <EditIcon className=\"editicon\" onClick={() => setEditable(false)} />\n      </div>\n    );\n  }\n};\n\nexport const Sidebar = () => {\n  let folderArr = [\n    { name: \"folder1\" },\n    { name: \"folder2\" },\n    { name: \"folder3\" },\n    { name: \"folder4\" },\n    { name: \"folder5\" },\n  ];\n  return (\n    <div className=\"sidebar\">\n      <div className=\"box\">\n        <Folders folderArr={folderArr} />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Modal } from \"./components/modal\";\nimport { Sidebar } from \"./components/sidebar\";\nimport AspectRatioOutlinedIcon from \"@material-ui/icons/AspectRatioOutlined\";\n\nconst Logo = ({ ModalToggle, modal }) => {\n  return (\n    <React.Fragment>\n      <img\n        onClick={ModalToggle}\n        className=\"logo\"\n        src={require(\"./testImage.png\")}\n        alt=\"logo\"\n      />\n     {modal ? <React.Fragment/> : <AspectRatioOutlinedIcon className='icon'/>} \n    </React.Fragment>\n  );\n};\n\nfunction Image({modalOn, setModalOn}) {\n  const ModalToggle = () => {\n    setModalOn(!modalOn);\n  };\n  if (!modalOn) {\n    return (\n      <div className=\"modal-container\">\n        <Logo modal={false} ModalToggle={ModalToggle} />{\" \"}\n      </div>\n    );\n  } else {\n    return (\n      <Modal>\n        <Logo modal={true} ModalToggle={ModalToggle} />\n      </Modal>\n    );\n  }\n}\n\nfunction App() {\n  const [modalOn, setModalOn] = useState(false);\n  return (\n    <div className=\"container\" onClick={()=>{if (modalOn) setModalOn(false)}}>\n      <Sidebar />\n      <Image modalOn={modalOn} setModalOn={setModalOn}/>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}